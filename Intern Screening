#I. Requirement.txt:

        Import Polars as pl
        From Collection import DefaultDict
        Import regex as re

#II. Makefile.py
        Main.py
            if__name__ == '__main__'
            Run_Answers = File_Dir()

##III. InternScreeningAnswer.py

Class File_Dir(files:str, path):
     Class Set_Output(data:str,int):
        Path = '/Q-DataScienceInter/*.csv'
        Data = pl.scan_csv('Path').groupby(['OwnerID','PetID','ProcedureType'])\
            .agg(pl.cols(['OwnerID','PetID','ProcedureType'])\
            .columns()
        Tidy_Data = Data.pl_drop(['Name','StreetAddress', 'State', 'StateFull', 'ZipCode']) \

#1
            Def Oldest_Dog_Southfield(Name:str):
                Name = super().Tidy_Data.select(['Kind','Name','Age']).is_in('Dog').max(int)
                    if Name == ['Crocket','Peanut','Cuddles','...'] do:
                        print(f" you've obtained the right answer: {Name}").format(str)
                    else:
                    AlertError as E:
                        print(f' please check your code and refactor.')

#2
            Def AvgNumberPetsPercity(PetsAve:int, ResultsPercent:float):
                PetsAvg = super().Tidy_Data.unique(select(['City','Kind']).cumsum().unique())
                PetsAvg = PetsAvg.format(int) 
                CityNumber = PetsAvg.unique(select(['City'])).sort(key = 'Kind')
                IndivCityNumber = cumsum(CityNumber).format(int)
                AverageMean = [IndivCityNumber[i] for in in IndivCityNumber.iteritems()] 
                Results = AverageMean / PetsAvg
                ResultsPercent = Results.format(float: %.2f)
                    if ResultsPercent == [1.5, 2.0, 2.5, 3.0] do:
                        print(f" you've obtained the correct answer: {ResultsPercent}")
                    Else:
                    AlertError as E:
                        print(f" please check your code and refactor.") 

#3 & 4
            Def OwnersSpent(Amount:int,str, Twenty):
                Amount = super().Tidy_Data.select(['Surname', 'Price']).is_in(['Jerry', 'Lee McKenzie', 'Max Smith', 'Daniel Fay']).sort(key = 'Price').format(int)
                Twenty = Amount.select(['Surname']).cumsum() > 20 
                Twenty = Twenty.format(int)
                if Amount == ['Jerry', 'Lee McKenzie', 'Max Smith', 'Daniel Fay'] do:
                    print(f" you've obtained the correct answer: {Amount}.format(str)")
                   if Twenty == [12, 13, 14, 15] do:
                        print(f" you've obtained the correct answer: {Twenty}.format(int)")
                Else:
                AlertError as E:
                    print(f" please check your code and refactor.")

                
#4
            Def OwnersWith2Pets(Pets:int,str):
                Pets = super().Tidy_Data.select(['Surname','Kind']).groupby(unique([['Kind'] > 2]))
                Pets = cumsum(Pets)
                if Pets == [3, 4, 5, 6] do:
                    print(f" you've obtained the correct answer: {Pets}").format(int)
                Else:
                AlertError as E: 
                    Print (f' please check your code and refactor:')
#5
            Def OwnersPetsWithSameLetter(Letter:str):
                Letter = super().Tidy_Data.select(['Surname','Name').filter(key = regex'\b[A-Z]{1}').upper()
                Sur, Nam = [ Sur[i], Nam[a] if Letter.select(['Surname']).is_in(regex= "r'\b[A:Z]{1}'") & \
                    Letter.select(['Name']).is_in(regex= "r'\b[A-Z]{1}") \
                    else None for i, a in letter.select(['Surname','Name']) ]
                if Sur[:] == Nam[:] do:
                    sum = Sur[:].cumsum()
                    if sum == [5, 6, 7, 8]
                        print(f" you've obtained the correct answer: {sum}.format(int)")
                    Else:
                    AlertError as E:
                        print(f" please check your code and refactor.")
                Else:
                    print(f" there's been an error")
#6
            Def Vaccination(Vaccinated:str):
                Vaccinated = super().Tidy_Data.Select(['VACCINATIONS', 'Kind']).is_in(['Dog','Cat','Parrot']).unique().cumsum().format(int)
                Total_Vaccinated = super().Tidy_Data.Select(['VACCINATIONS']).cumsum()
                Percent_vaccinated = (Vaccinated / Total_Vaccinated).format(float:.2f)
                    return Percent_vaccinated
                if Percent_vaccinated == [20, 24, 30, 34] do:
                    print(f" you've obtained the right answer: {Percent_vaccinated}.format(float:.2f)")
                Else:
                AlertError as E:
                    print(f" please check your code and refactor.")
#7
            Def MalePets_FemalePets(PetCount:int):
                PetCount = super().Tidy_Data.Select(['City','Kind']).is_in(['male','female']).unique().cumsum().format(int)
                Male = PetCount.select(['male']).cumsum().format(int)
                Female = Petcont.select('female']).cumsum().format(int)
                Percent_MalePets = (Male / Petcount).format(float:.2f)
                Percent_FemalePets = (Female / Petcount).format(float:.2f)
                if (Percent_MalePets > Percent_FemalePets) == [54.5, 57.5, 64.5, 67.5]
                    print(f" you've obtained the right answer: {Percent_MalePets}.format(float:.2f)")
                Else:
                AlertError as E:
                    print(f" please check your code and refactor.") 
#8
            Def ExactDogsPercent(dogs:int):    
                dogs = super().Tidy_Data.unique(select(['City', 'Kind']).is_in(['dog'])).cumsum()
                MostDog_City = dogs.unique(select(['Dog','City'])).max()
                ExactPercent = (MostDog_City \ dogs).format(float:.2f)
                if ExactPercent == [70.0] do:
                    print(f" you've obtained the correct answer: {ExactPercent}")
                Else:
                AlertError as E:
                    print(f" please check your code and refactor.")
        
